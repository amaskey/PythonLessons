# -*- coding: utf-8 -*-
"""Lesson1.September.28.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/138cN1zn4V1AIfc9RByDSDsVp4oMyRjCg

#Lesson 1: Introduction to Loops, Lists, and Tuples in Python
#Author: Arnav Maskey
"""

#For Loop
#Use a for loop when the number of iterations is known, or you are iterating over a sequence.

#Simple For Loop:
# Looping through a range of numbers
for i in range(5):
    print(i)  # Output: 0, 1, 2, 3, 4

#For Loop with a List:
fruits = ["apple", "banana", "cherry"]
for fruit in fruits:
    print(fruit)  # Output: apple, banana, cherry

#For Loop with enumerate:
# Looping through a list with index
for index, fruit in enumerate(fruits):
    print(f"{index}: {fruit}")  # Output: 0: apple, 1: banana, 2: cherry

# Nested For loop
for i in range(3):
    for j in range(3):
        print(f"({i}, {j})")  # Outputs pairs of indices (0,0), (0,1), (0,2), etc

#While Loop
#Use a while loop when the number of iterations is not known in advance, and the loop should continue as long as a certain condition is met.

# Simple while loop
counter = 0
while counter < 5:
    print(counter)  # Output: 0, 1, 2, 3, 4
    counter += 1

# While loop with break:
counter = 0
while True:
    if counter >= 5:
        break
    print(counter)  # Output: 0, 1, 2, 3, 4
    counter += 1

#Lists
 #Utilizing lists is suitable in various scenarios due to their flexibility and the extensive functionality they provide. Here are some situations where using a list is appropriate:

#Dynamic Data Collection:
#When you need a collection that can grow or shrink dynamically based on the program's requirements, lists are an excellent choice.

#Ordered Data:
#If the order of elements matters for your application, lists preserve the order of insertion, making them a suitable choice.

#Iterating Over Elements:
#Lists are ideal when you need to iterate over elements, whether it's through a for-loop or while-loop.

#Multi-dimensional Arrays:
#You can create multi-dimensional arrays using lists of lists, which is useful in various applications, such as matrix operations.

#Data Manipulation:

 # Creating a list
my_list = [1, 2, 3, 4, 5]
print(f"My list: {my_list}")

# Accessing elements in a list
print(f"The first element in my list is: {my_list[0]}")

# Modifying a list
my_list[1] = 10
print(f"My modified list: {my_list}")

#Tuples
#Tuples are useful in various scenarios due to their immutability and ability to hold heterogeneous data. Here are several instances when you might want to use tuples:
#Immutable Data:

#When you have data that should not be changed, tuples are a great choice since they are immutable.
#Heterogeneous Data:

#Tuples can store a mix of data types, making them useful for grouping different but related pieces of information together.
#Hashable Keys:

#Tuples can be used as keys in dictionaries, unlike lists, because they are hashable.

# Creating a tuple
my_tuple = (1, 2, 3, 4, 5)
print(f"My tuple: {my_tuple}")

# Accessing elements in a tuple
print(f"The second element in my tuple is: {my_tuple[1]}")

# Note: Tuples are immutable, so you cannot modify them like lists