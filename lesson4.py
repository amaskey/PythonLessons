# -*- coding: utf-8 -*-
"""Lesson4

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iYtPMGaQV7LYKorHUk2RT81J1kivqH3m

#Lesson 4: Column Encoding
#Author: Arnav Maskey

Understanding Tables and DataFrames

One common way to organize data is in a table, similar to a spreadsheet.
In Python, a popular library called pandas is used to work with tabular data, and it provides a structure called a DataFrame to hold this kind of data.
A DataFrame is like a table with rows and columns, where each column has a name.

What is Categorical Data?

In a DataFrame, some columns may contain categorical data.
Categorical data is a type of data that can take on one of a limited set of values.
These values represent possible categories or labels.
For example, a column named "Color" in a DataFrame might have values like "Red", "Green", and "Blue". These are categories.

The Need for Column Encoding

Many machine learning algorithms and models work better with numerical data rather than text.
However, our data often includes categorical data, which is text.
So, we need a way to convert these categories into numbers. This process is called column encoding.

Types of Column Encoding

There are several ways to do column encoding, but two of the most common methods are:

1. **Label Encoding**: This method converts each category into a unique integer. For example, "Red" might become 0, "Green" might become 1, and "Blue" might become 2.

2. **One-Hot Encoding**: This method creates a new column for each category and uses 0s and 1s to indicate the presence of a category. For the "Color" example, it would create three new columns: "Color_Red", "Color_Green", and "Color_Blue". If a row had the color "Red", then "Color_Red" would be 1, and "Color_Green" and "Color_Blue" would be 0.

When to Use Each Method

- **Label Encoding**: Use this when the categorical variable has some kind of order or hierarchy (ordinal data). For example, "Low", "Medium", "High".

- **One-Hot Encoding**: Use this when there is no ordinal relationship in the categorical variable (nominal data). For example, "Red", "Green", "Blue".
"""

# Example: Column Encoding in Python

# First, make sure you have the required libraries installed:

#pip install pandas scikit-learn

#Now, letâ€™s proceed with the example:

import pandas as pd
from sklearn.preprocessing import LabelEncoder, OneHotEncoder

# Sample DataFrame with a categorical column
data = {'Fruit': ['Apple', 'Banana', 'Orange', 'Apple', 'Banana']}
df = pd.DataFrame(data)

print("Fruit DataFrame:")
print(df)

## Label Encoding
label_encoder = LabelEncoder()
df['Fruit_LabelEncoded'] = label_encoder.fit_transform(df['Fruit'])

print("\nDataFrame after Label Encoding:")
print(df)

# # One-Hot Encoding
one_hot_encoder = OneHotEncoder(sparse=False)
fruit_one_hot = one_hot_encoder.fit_transform(df[['Fruit']])
fruit_one_hot_df = pd.DataFrame(fruit_one_hot, columns=one_hot_encoder.get_feature_names_out(['Fruit']))

df_one_hot_encoded = pd.concat([df, fruit_one_hot_df], axis=1)

print("\nDataFrame after One-Hot Encoding:")
print(df_one_hot_encoded)

"""# Explanation:

1. **Original DataFrame**: We start with a simple DataFrame that has a single column 'Fruit' with categorical data.

2. **Label Encoding**:
   - We use `LabelEncoder` from scikit-learn to convert each unique fruit name into a unique integer.
   - A new column 'Fruit_LabelEncoded' is added to the DataFrame to store the encoded values.

3. **One-Hot Encoding**:
   - We use `OneHotEncoder` from scikit-learn to convert the 'Fruit' column into one-hot encoded format.
   - This creates a binary matrix indicating the presence of each fruit.
   - The result is stored in a new DataFrame, which is then concatenated with the original DataFrame.

After running this example, you will see how the categorical 'Fruit' column is transformed into numerical formats using both label encoding and one-hot encoding.

```

"""

# More example

import pandas as pd
from sklearn.preprocessing import LabelEncoder

# Sample DataFrame with various categorical columns
data = {
    'Vehicle_Type': ['Car', 'Bike', 'Truck', 'Bike', 'Car', 'Truck'],
    'Fuel_Type': ['Petrol', 'Petrol', 'Diesel', 'Diesel', 'Electric', 'Petrol'],
    'Color': ['Red', 'Blue', 'Green', 'Red', 'Blue', 'Green']
}

df = pd.DataFrame(data)

print("Original DataFrame:")
print(df)

# Applying Label Encoding
label_encoder = LabelEncoder()

# Encoding 'Vehicle_Type'
df['Vehicle_Type_Encoded'] = label_encoder.fit_transform(df['Vehicle_Type'])

# Encoding 'Fuel_Type'
df['Fuel_Type_Encoded'] = label_encoder.fit_transform(df['Fuel_Type'])

# Encoding 'Color'
df['Color_Encoded'] = label_encoder.fit_transform(df['Color'])

print("\nDataFrame after Label Encoding:")
print(df)

"""
# Explanation:

1. **Original DataFrame**: We start with a DataFrame that includes information about different vehicles, including their type, fuel type, and color.

2. **Label Encoding**:
   - We use `LabelEncoder` from scikit-learn to convert the categorical data in each column into numerical format.
   - For each column, a new column is added to store the encoded values. For example, 'Vehicle_Type' is encoded and stored in 'Vehicle_Type_Encoded'.
   - The encoding is done based on alphabetical order of the categories. For instance, in 'Vehicle_Type', 'Bike' is encoded as 0, 'Car' as 1, and 'Truck' as 2.

After running this example, you will see how label encoding transforms the categorical data in the DataFrame into a numerical format, making it easier to use in machine learning models. This example is interesting because it shows label encoding applied to multiple columns, each with different types of categories.
```
"""