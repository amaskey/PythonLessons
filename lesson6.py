# -*- coding: utf-8 -*-
"""Lesson6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-4wHHO_Gfgc81qLhGy0UnpHxZhYxbu_G

# Basic Data Analysis: Loading and Viewing Data
1. Learn to load data using Pandas and view basic information.
"""

import pandas as pd

# Load a CSV file
df = pd.read_csv('sample_data.csv')
#sample_data.csv has been created, upload to the drive or the local machine

# Display the first few rows of the DataFrame
print(df.head())

# Basic information about the dataset
print(df.info())

"""
2. Perform basic data exploration to understand the dataset.
"""

# Descriptive statistics
print(df.describe())

# Count of unique values in a column
print(df['column_name'].value_counts())

"""3. Clean the data by handling missing values and filtering.

"""

# Handling missing values
df = df.fillna(method='ffill')  # Forward fill

# Filtering data
filtered_df = df[df['column_name'] > value]

"""4. Visualize data distributions and relationships"""

import matplotlib.pyplot as plt

# Histogram
df['column_name'].hist()
plt.title('Distribution of Column')
plt.xlabel('Column')
plt.ylabel('Frequency')
plt.show()

# Scatter plot
plt.scatter(df['column1'], df['column2'])
plt.title('Column1 vs Column2')
plt.xlabel('Column1')
plt.ylabel('Column2')
plt.show()

"""5. Group data and perform aggregate calculations.

"""

# Group by a column and aggregate
grouped = df.groupby('group_column').mean()
print(grouped)

"""6. Handle and analyze time-series data.

"""

# Convert column to datetime
df['date_column'] = pd.to_datetime(df['date_column'])

# Set date column as index
df.set_index('date_column', inplace=True)

# Resampling data by month and computing mean
monthly_data = df.resample('M').mean()
print(monthly_data)

"""7. Perform advanced operations like merging, joining, and pivoting.

"""

# Merging two DataFrames
df1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'value': [1, 2, 3]})
df2 = pd.DataFrame({'key': ['B', 'C', 'D'], 'value': [4, 5, 6]})
merged_df = pd.merge(df1, df2, on='key')
print(merged_df)

# Pivot table
pivot = df.pivot_table(index='row', columns='column', values='value', aggfunc='mean')
print(pivot)

"""8. Create more complex plots and visualizations.

"""

# Box plot
df.boxplot(column='column_name', by='group_column')
plt.title('Box Plot')
plt.show()

# Pairplot (using Seaborn)
import seaborn as sns
sns.pairplot(df)
plt.show()

"""9. Apply basic statistical tests.

"""

from scipy import stats

# T-test
t_stat, p_val = stats.ttest_ind(df['column1'], df['column2'])
print("T-statistic:", t_stat, "P-value:", p_val)

"""10. Use a simple machine learning model for prediction.

"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

# Assuming df has features and target
X = df[['feature1', 'feature2']]
y = df['target']

# Splitting data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

# Linear Regression Model
model = LinearRegression()
model.fit(X_train, y_train)

# Predictions
predictions = model.predict(X_test)
print(predictions)